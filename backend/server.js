// Import necessary modules
const express = require('express');
const { OpenAI } = require('openai');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
require('dotenv').config({ path: './config/.env' });

const { S3Client, PutObjectCommand, ListObjectsV2Command, HeadObjectCommand } = require("@aws-sdk/client-s3");

const s3Client = new S3Client({
  region: process.env.AWS_REGION,
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  },
});

// Your S3 file upload logic
const uploadFileToS3 = async (fileBuffer, fileName, filePrompt) => {
  try {
    const uploadParams = {
      Bucket: process.env.AWS_BUCKET_NAME,
      Key: fileName,
      Body: fileBuffer,
      ContentType: 'audio/wav',
      Metadata: {
        title: filePrompt,
        creator: 'Generated by MusicMixer',
        date: new Date().toISOString(),

      }
      //ACL: 'public-read'
    };

    const command = new PutObjectCommand(uploadParams);
    const data = await s3Client.send(command);

    console.log('File uploaded successfully:', data);
    return data; // Return the successful response
  } catch (error) {
    console.error('Error uploading file to S3:', error);
    throw new Error('Error uploading to S3');
  }
};
console.log('OPENAI_API_KEY:', process.env.OPENAI_API_KEY);


const app = express();
const PORT = process.env.PORT;

// Initialize OpenAI with API key
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// This middleware automatically parses JSON request bodies into JavaScript objects
app.use(express.json());

// CORS middleware for handling cross-origin requests from your frontend
app.use(function (req, res, next) {
  res.header('Access-Control-Allow-Origin', '*'); // You can restrict this in production
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
  next();
});

// Root endpoint
app.get('/', (req, res) => {
  res.send('MusicMixer API is running');
});

// Lyrics generation route
app.post('/api/generate-lyrics', async (req, res) => {
  const { prompt } = req.body;
  if (!prompt) {
    return res.status(400).json({
      success: false,
      message: 'Prompt is required',
    });
  }

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: 'You are a professional songwriter who specializes in writing lyrics.' },
        { role: 'user', content: `Write song lyrics based on this description: ${prompt}` },
      ],
      temperature: 0.7,
      max_tokens: 500,
    });

    const lyrics = response.choices[0].message.content.trim();

    res.status(200).json({
      success: true,
      data: { id: 'lyric_' + Date.now(), lyrics: lyrics, prompt: prompt },
      message: 'Lyrics generated successfully',
    });
  } catch (error) {
    console.error('Error generating lyrics:', error);
    res.status(500).json({
      success: false,
      message: 'Error generating lyrics',
      error: error.message,
    });
  }
});

// Music generation route and S3 upload logic
app.post('/api/generate-music', async (req, res) => {
  const { prompt } = req.body;
  if (!prompt) {
    return res.status(400).json({ error: 'Prompt is required' });
  }

  try {
    // Call MusicGen API to generate music (assuming Flask is running)
    //const response = await axios.post('http://localhost:5001/generate', { prompt }, { responseType: 'arraybuffer' });

    // generation locally with the musicgen-container through docker
    const response = await axios.post('http://localhost:8080/generate', { prompt }, { responseType: 'arraybuffer' }); 


    const fileBuffer = Buffer.from(response.data);
    const fileName = `${prompt}_${Date.now()}.wav`; // Generate unique filename

    // Upload to S3 using SDK v3
    const data = await uploadFileToS3(fileBuffer, fileName, prompt);
    const audioUrl = `https://${process.env.AWS_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${fileName}`;

    console.log("Generated Audio URL:", audioUrl);  // Log the URL for debugging

    

    // // Return the URL to the user
    res.status(200).json({
      success: true,
      data: {
        id: 'gen_' + Date.now(),
        audioUrl: audioUrl,  // Return the S3 URL of the uploaded file
        status: 'completed',
      },
      message: 'Music generated and uploaded to S3 successfully!',
    });

    console.log('Response sent to frontend:', {
      success: true,
      data: {
        id: 'gen_' + Date.now(),
        audioUrl: response.data.audioUrl,  // Ensure this URL is valid and correct
        link: audioUrl,  // Return the S3 URL of the uploaded file
      },
      message: 'Music generated and uploaded to S3 successfully!',
    });
  } catch (error) {
    console.error('Error generating and uploading music:', error);
    res.status(500).json({ error: 'Error generating and uploading music' });
  }
});



app.get('/api/catalog', async (req, res) => {
  try {
    const listCommand = new ListObjectsV2Command({
      Bucket: process.env.AWS_BUCKET_NAME,
    });

    const listResponse = await s3Client.send(listCommand);

    const files = listResponse.Contents || [];

    const songData = await Promise.all(files.map(async (file) => {
      const headCommand = new HeadObjectCommand({
        Bucket: process.env.AWS_BUCKET_NAME,
        Key: file.Key,
      });

      const headResponse = await s3Client.send(headCommand);
      const metadata = headResponse.Metadata;

      return {
        id: file.Key,
        title: metadata.title || file.Key,
        creator: metadata.creator || 'Unknown',
        date: metadata.date || new Date().toISOString(),
        tags: metadata.tags ? metadata.tags.split(',') : [],
        img: '/placeholder.jpg', // Later you can generate thumbnails or use genre-specific images
        url: `https://${process.env.AWS_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${file.Key}`,
      };
    }));

    res.json(songData);
  } catch (err) {
    console.error('Error fetching catalog:', err);
    res.status(500).json({ error: 'Failed to fetch catalog from S3' });
  }
});

// Start the Express server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`Test the API at http://localhost:${PORT}/`);
  console.log(`OpenAI API status: ${process.env.OPENAI_API_KEY ? 'Configured' : 'Missing API key! Check your .env file'}`);
});
